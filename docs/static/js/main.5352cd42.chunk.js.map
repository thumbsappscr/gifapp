{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAChC,MAAO,CACHF,KACAC,QACAT,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBX,QATnB,kBAYZM,GAZY,4CAAH,sDCEPM,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACrC,OACI,qBAAKa,UAAU,yCAAf,SACI,qBAAKC,IAAKd,EAAKe,IAAKN,OCDnBO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNY,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAetC,OARAC,qBAAU,WACNvB,EAAQC,GACHuB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnBd,KAAMiB,EACNL,SAAS,SAElB,CAACnB,IAEGoB,EDZ0BK,CAAazB,GAAjCY,EAHwB,EAG7BL,KAAaY,EAHgB,EAGhBA,QAIrB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDf,IAClDmB,GAAW,mBAAGJ,UAAU,mCAAb,wBAER,qBAAKA,UAAU,WAAf,SACKH,EAAOH,KAAI,SAAAiB,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aEfxBiB,EAAS,WAAO,IAAD,EAEYzC,mBAAS,CAAC,cAFtB,mBAEjB0C,EAFiB,KAEL3C,EAFK,KAIxB,OACI,qCACI,yCACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACK2C,EAAWnB,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCV1D6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5352cd42.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    } \r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=RCVFJiACf5LpbzoTPO5ZOjBrIYn574mq`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(({ id, title, images }) => {\r\n        return {\r\n            id,\r\n            title,\r\n            url: images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    return ( \r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            {/* <p>{title}</p> */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n\r\n                <div className=\"cardGrid\">\r\n                    {images.map(img =>\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />)}\r\n                </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => setState({\r\n                data: imgs,\r\n                loading: false\r\n            }));\r\n    }, [category]);\r\n\r\n    return state;\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Samurai X'])\r\n\r\n    return ( \r\n        <>\r\n            <h2>Gif app</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {categories.map(category => <GifGrid key={category} category={category} />)}\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifApp } from './GifApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}